<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="parser_8h" kind="file" language="C++">
    <compoundname>parser.h</compoundname>
    <includes refid="stack_8h" local="yes">stack.h</includes>
    <includedby refid="main_8c" local="yes">main.c</includedby>
    <includedby refid="operations_8c" local="yes">operations.c</includedby>
    <includedby refid="operations_8h" local="yes">operations.h</includedby>
    <includedby refid="parser_8c" local="yes">parser.c</includedby>
    <incdepgraph>
      <node id="3">
        <label>assert.h</label>
      </node>
      <node id="1">
        <label>parser.h</label>
        <link refid="parser_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>parser.c</label>
        <link refid="parser_8c"/>
      </node>
      <node id="1">
        <label>parser.h</label>
        <link refid="parser_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>operations.c</label>
        <link refid="operations_8c"/>
      </node>
      <node id="2">
        <label>main.c</label>
        <link refid="main_8c"/>
      </node>
      <node id="4">
        <label>operations.h</label>
        <link refid="operations_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="parser_8h_1ac6501e3fdf6b21e3f382ad0d1bbba180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parse</definition>
        <argsstring>(char *line, STACK *s)</argsstring>
        <name>parse</name>
        <param>
          <type>char *</type>
          <declname>line</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função que vai fazer o parse de uma linha. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>A linha que foi lida e ao qual se vai fazer o parse.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack que vai ser usada ao longo do parse. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="parser.h" line="9" column="6" bodyfile="parser.c" bodystart="37" bodyend="182" declfile="parser.h" declline="9" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="parser_8h_1a5f4c3e9012c8fc19f58d7faf76fb9bae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void passData</definition>
        <argsstring>(char *v, char *s)</argsstring>
        <name>passData</name>
        <param>
          <type>char *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função que vai duplicar uma string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>String de origem.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>String para a qual vai ser copiada a original. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="parser.h" line="10" column="6" bodyfile="parser.c" bodystart="196" bodyend="204" declfile="parser.h" declline="10" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="parser_8h_1a938e0f8c6fc7f44d7261d25c1ffeb3f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parse2</definition>
        <argsstring>(char *line, STACK *s)</argsstring>
        <name>parse2</name>
        <param>
          <type>char *</type>
          <declname>line</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função que vai adicionar à stack o conteúdo de uma linha. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>A linha que foi lida e ao qual se vai fazer o parse.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack que vai ser usada ao longo do parse. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="parser.h" line="11" column="6" bodyfile="parser.c" bodystart="217" bodyend="257" declfile="parser.h" declline="11" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="parser_8h_1aff4e33f8697762e76f82a1431a965111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int descobreTipo</definition>
        <argsstring>(DATA x)</argsstring>
        <name>descobreTipo</name>
        <param>
          <type><ref refid="stack_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Esta é a função que vai descobrir o tipo do elemento da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>1 Caso o valor seja do tipo LONG</para>
</simplesect>
<simplesect kind="return"><para>2 Caso o valor seja do tipo DOUBLE</para>
</simplesect>
<simplesect kind="return"><para>3 Caso o valor seja do tipo CHAR</para>
</simplesect>
<simplesect kind="return"><para>4 Caso o valor seja do tipo STRING</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="parser.h" line="12" column="5" bodyfile="operations.c" bodystart="49" bodyend="61" declfile="parser.h" declline="12" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Ficheiro que contém as declarações das funções do ficheiro <ref refid="parser_8c" kindref="compound">parser.c</ref> . </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="7"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stack_8h" kindref="compound">stack.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parser_8h_1ac6501e3fdf6b21e3f382ad0d1bbba180" kindref="member">parse</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line,<sp/><ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parser_8h_1a5f4c3e9012c8fc19f58d7faf76fb9bae" kindref="member">passData</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parser_8h_1a938e0f8c6fc7f44d7261d25c1ffeb3f1" kindref="member">parse2</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line,<sp/><ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="parser_8h_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(<ref refid="structdata" kindref="compound">DATA</ref><sp/>x);</highlight></codeline>
    </programlisting>
    <location file="parser.h"/>
  </compounddef>
</doxygen>
