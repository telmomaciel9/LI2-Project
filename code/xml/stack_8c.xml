<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="stack_8c" kind="file" language="C++">
    <compoundname>stack.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="stack_8h" local="yes">stack.h</includes>
    <incdepgraph>
      <node id="5">
        <label>assert.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>stack.c</label>
        <link refid="stack_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="stack_8c_1ab37b0d083f873fbdc37d708bb9f40efc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
        <definition>STACK* create_stack</definition>
        <argsstring>()</argsstring>
        <name>create_stack</name>
        <briefdescription>
<para>Esta é a função que vai criar a stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>s </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.c" line="24" column="7" bodyfile="stack.c" bodystart="24" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void push</definition>
        <argsstring>(STACK *s, DATA elem)</argsstring>
        <name>push</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref></type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Esta é a função que vai fazer o push de um elemento na stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>é apontador para a stack.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>é o elemento que vai ser adicionado no topo da stack. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.c" line="42" column="6" bodyfile="stack.c" bodystart="42" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="stack_8c_1a28bdc96407c992586646198197537cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stack_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref></type>
        <definition>DATA pop</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>pop</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função que vai fazer o pop numa stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>é apontador para a stack.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>s-&gt;stack[s-&gt;n_elems] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.c" line="61" column="6" bodyfile="stack.c" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="stack_8c_1a1c8a0d720a37d9d2a5844e6013c915c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stack_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref></type>
        <definition>DATA top</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>top</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função que verifica o elemento que está no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>é apontador para a stack.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>s-&gt;stack[s-&gt;n_elems - 1] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.c" line="76" column="6" bodyfile="stack.c" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="stack_8c_1a1d071ebb0cb4da36627da80425078ce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stack_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref></type>
        <definition>DATA obterElemento</definition>
        <argsstring>(STACK *s, long x)</argsstring>
        <name>obterElemento</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>long</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Esta é a função que vai buscar a posição da stack, de um certo elemento. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>é apontador para a stack.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>do</parametername>
</parameternamelist>
<parameterdescription>
<para>tipo long, que é o elemento cuja posição estamos à procura.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>y </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.c" line="91" column="6" bodyfile="stack.c" bodystart="91" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="stack_8c_1ae31d2a4c10db0d5b01ecd8a8aab01cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int is_empty</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>is_empty</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função que verifica se a stack está vazia. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>é apontador para a stack.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 se a condição for verdadeira ou 0 se for falso. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.c" line="107" column="5" bodyfile="stack.c" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="stack_8c_1a42b87bab2d601cb02900935c9b80fc23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_stack</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>print_stack</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função que imprime a stack no ecrã. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>é apontador para a stack. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.c" line="119" column="6" bodyfile="stack.c" bodystart="119" bodyend="142"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Funções que dizem respeito à manipulação da stack. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="7"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stack_8h" kindref="compound">stack.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="12"><highlight class="comment">int<sp/>has_type(DATA<sp/>elem,<sp/>int<sp/>mask)</highlight></codeline>
<codeline lineno="13"><highlight class="comment">{</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>return<sp/>(elem.type<sp/>&amp;<sp/>mask)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="15"><highlight class="comment">}</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><ref refid="structstack" kindref="compound">STACK</ref><sp/>*<ref refid="stack_8c_1ab37b0d083f873fbdc37d708bb9f40efc" kindref="member">create_stack</ref>()</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><ref refid="structstack" kindref="compound">STACK</ref><sp/>*s<sp/>=<sp/>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*)calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structstack" kindref="compound">STACK</ref>));</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//s-&gt;n_elems<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>s-&gt;<ref refid="structstack_1a90c1e6843be5e97a88afb926d7d08d3c" kindref="member">size</ref><sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>s-&gt;<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref><sp/>=<sp/>(<ref refid="structdata" kindref="compound">DATA</ref><sp/>*)calloc(s-&gt;<ref refid="structstack_1a90c1e6843be5e97a88afb926d7d08d3c" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structdata" kindref="compound">DATA</ref>));</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s,<sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>elem)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structstack_1a90c1e6843be5e97a88afb926d7d08d3c" kindref="member">size</ref><sp/>==<sp/>s-&gt;<ref refid="structstack_1ab96e89c56a7208d7fb1c5d51d68e53f0" kindref="member">n_elems</ref>)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structstack_1a90c1e6843be5e97a88afb926d7d08d3c" kindref="member">size</ref><sp/>+=<sp/>100;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref><sp/>=<sp/>(<ref refid="structdata" kindref="compound">DATA</ref><sp/>*)realloc(s-&gt;<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref>,<sp/>s-&gt;<ref refid="structstack_1a90c1e6843be5e97a88afb926d7d08d3c" kindref="member">size</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structdata" kindref="compound">DATA</ref>));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>s-&gt;<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref>[s-&gt;<ref refid="structstack_1ab96e89c56a7208d7fb1c5d51d68e53f0" kindref="member">n_elems</ref>]<sp/>=<sp/>elem;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>s-&gt;<ref refid="structstack_1ab96e89c56a7208d7fb1c5d51d68e53f0" kindref="member">n_elems</ref>++;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="structdata" kindref="compound">DATA</ref><sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>s-&gt;<ref refid="structstack_1ab96e89c56a7208d7fb1c5d51d68e53f0" kindref="member">n_elems</ref>--;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s-&gt;<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref>[s-&gt;<ref refid="structstack_1ab96e89c56a7208d7fb1c5d51d68e53f0" kindref="member">n_elems</ref>];</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="structdata" kindref="compound">DATA</ref><sp/><ref refid="stack_8c_1a1c8a0d720a37d9d2a5844e6013c915c2" kindref="member">top</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s-&gt;<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref>[s-&gt;<ref refid="structstack_1ab96e89c56a7208d7fb1c5d51d68e53f0" kindref="member">n_elems</ref><sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><ref refid="structdata" kindref="compound">DATA</ref><sp/><ref refid="stack_8c_1a1d071ebb0cb4da36627da80425078ce9" kindref="member">obterElemento</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>y<sp/>=<sp/>s-&gt;<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref>[s-&gt;<ref refid="structstack_1ab96e89c56a7208d7fb1c5d51d68e53f0" kindref="member">n_elems</ref><sp/>-<sp/>x<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//s-&gt;n_elems+x+1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1ae31d2a4c10db0d5b01ecd8a8aab01cfc" kindref="member">is_empty</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s-&gt;<ref refid="structstack_1ab96e89c56a7208d7fb1c5d51d68e53f0" kindref="member">n_elems</ref><sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1a42b87bab2d601cb02900935c9b80fc23" kindref="member">print_stack</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>0;<sp/>K<sp/>&lt;<sp/>s-&gt;<ref refid="structstack_1ab96e89c56a7208d7fb1c5d51d68e53f0" kindref="member">n_elems</ref>;<sp/>K++)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>elem<sp/>=<sp/>s-&gt;<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref>[K];</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7" kindref="member">TYPE</ref><sp/>type<sp/>=<sp/>elem.<ref refid="structdata_1ae5547d02a1e1490a68bbd43c3fceb447" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>:</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%ld&quot;</highlight><highlight class="normal">,<sp/>elem.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%g&quot;</highlight><highlight class="normal">,<sp/>elem.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref>);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a4618cf21306b3c647741afa7ebefcab8" kindref="member">CHAR</ref>:</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>elem.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1a26ec264014a6fcbcdbc5e69936e59724" kindref="member">CHAR</ref>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aee847e634a4297b274316de8a8ca9921" kindref="member">STRING</ref>:</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>elem.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1a3beeb46678aaab2565d0a2669c03ea1f" kindref="member">STRING</ref>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>printf(&quot;\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">/*#define<sp/>STACK_OPERATION(_type,<sp/>_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/>void<sp/>push_##_name(STACK<sp/>*s,<sp/>_type<sp/>val)<sp/>{<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/>DATA<sp/>elem;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/>elem.type<sp/>=<sp/>_name;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/>elem._name<sp/>=<sp/>val;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/>push(s,<sp/>elem);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/>_type<sp/>pop_##_name(STACK<sp/>*s)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/>DATA<sp/>elem<sp/>=<sp/>pop(s);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/>assert(elem.type<sp/>==<sp/>_name);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>elem._name;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment">STACK_OPERATION(long,<sp/>LONG)</highlight></codeline>
<codeline lineno="159"><highlight class="comment">STACK_OPERATION(double,<sp/>DOUBLE)</highlight></codeline>
<codeline lineno="160"><highlight class="comment">STACK_OPERATION(char,<sp/>CHAR)</highlight></codeline>
<codeline lineno="161"><highlight class="comment">STACK_OPERATION(char<sp/>*,<sp/>STRING)*/</highlight></codeline>
    </programlisting>
    <location file="stack.c"/>
  </compounddef>
</doxygen>
