<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="operations_8c" kind="file" language="C++">
    <compoundname>operations.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="parser_8h" local="yes">parser.h</includes>
    <includes refid="stack_8h" local="yes">stack.h</includes>
    <incdepgraph>
      <node id="4">
        <label>assert.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="7">
        <label>parser.h</label>
        <link refid="parser_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>operations.c</label>
        <link refid="operations_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>math.h</label>
      </node>
      <node id="8">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" prot="public" static="no">
        <name>MAKE_DADOS</name>
        <param><defname>var</defname></param>
        <param><defname>TYPE</defname></param>
        <param><defname>valor</defname></param>
        <initializer>    <ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7" kindref="member">var.dados.TYPE</ref> = valor;          \
    var.type = <ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7" kindref="member">TYPE</ref>;</initializer>
        <briefdescription>
<para>Esta macro converte o valor para o tipo que desejamos. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>Variável onde vai ficar armazenado o valor convertido. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>Tipo para o qual vai ser convertido o valor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valor</parametername>
</parameternamelist>
<parameterdescription>
<para>Variável onde está guardado o valor a converter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="30" column="9" bodyfile="operations.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="operations_8c_1aff4e33f8697762e76f82a1431a965111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int descobreTipo</definition>
        <argsstring>(DATA x)</argsstring>
        <name>descobreTipo</name>
        <param>
          <type><ref refid="stack_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Esta é a função que vai descobrir o tipo do elemento da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>1 Caso o valor seja do tipo LONG</para>
</simplesect>
<simplesect kind="return"><para>2 Caso o valor seja do tipo DOUBLE</para>
</simplesect>
<simplesect kind="return"><para>3 Caso o valor seja do tipo CHAR</para>
</simplesect>
<simplesect kind="return"><para>4 Caso o valor seja do tipo STRING</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="49" column="5" bodyfile="operations.c" bodystart="49" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1ab036ce08365356af3d41ddf51b84d4b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soma</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>soma</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função que vai fazer a soma de dois valores. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="73" column="6" bodyfile="operations.c" bodystart="73" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1a0be10fa2e7b410007fa5f636331ab467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sub</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>sub</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função que vai fazer a subtração de dois valores. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="108" column="6" bodyfile="operations.c" bodystart="108" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1a677f43a17e3ec86964dcedfdcf7ff731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mult</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função que multiplica dois valores. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="144" column="6" bodyfile="operations.c" bodystart="144" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1a6006fae1a4b27343bd0a1c0bbe3ae7df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void quoc</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>quoc</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função que divide dois valores um pelo outro. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="180" column="6" bodyfile="operations.c" bodystart="180" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1a6662ed5c52f3db81ac4f956d386f8978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dec</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>dec</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função é responsável por decrementar 1 valor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="216" column="6" bodyfile="operations.c" bodystart="216" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1a35553b28f5794cfdb4be0b0e3e3f5435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inc</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>inc</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função responsável por incrementar 1 valor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="246" column="6" bodyfile="operations.c" bodystart="246" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1a6c479ffe2d68a52a12195e3d77b65098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resto</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>resto</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função que vai apresentar o resto da divisão. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="276" column="6" bodyfile="operations.c" bodystart="276" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1adc7913acd9d3f73a2a21031fca415b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void expo</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>expo</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função responsável pela exponencialização de valores. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="294" column="6" bodyfile="operations.c" bodystart="294" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1a8cbbd532cb1f78509a9530ad463aa4b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void E</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>E</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que realiza operações do &apos;e&apos; lógico (bitwise) para inteiros. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="330" column="6" bodyfile="operations.c" bodystart="330" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1a3429e63d3d7972ee8ebddf4423934dcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ou</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>ou</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que realiza operações do &apos;ou&apos; lógico (bitwise) para inteiros. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="348" column="6" bodyfile="operations.c" bodystart="348" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1a5bfa48c870cc33d3d96ec12376d5210a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xor</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>xor</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que realiza operações xor (bitwise) para inteiros. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="366" column="6" bodyfile="operations.c" bodystart="366" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1a86f1cdf0f667f0fd0ab97668984592fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void not</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>not</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que realiza operações not (bitwise) para inteiros. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="384" column="10" bodyfile="operations.c" bodystart="384" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1addd91ecb562fd740a614a07e06b9a7c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void convertInt</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>convertInt</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que converte o valor do topo da stack para inteiro. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="401" column="6" bodyfile="operations.c" bodystart="401" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1a24feda1ccdd45af669d76b27f8a8ce55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void convertDouble</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>convertDouble</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que converte o valor do topo da stack para double. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="439" column="6" bodyfile="operations.c" bodystart="439" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1a7786f26285bd01e3ed020358c4759c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void convertChar</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>convertChar</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que converte o valor do topo da stack para caractere. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="475" column="6" bodyfile="operations.c" bodystart="475" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1a5baa2ca1427f81508387c34b481f2998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que troca os últimos 2 elementos da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="520" column="6" bodyfile="operations.c" bodystart="520" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1a0df52259d8bd9d410d895561de62b661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rotate</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>rotate</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que roda os últimos 3 elementos da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="536" column="6" bodyfile="operations.c" bodystart="536" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1a5ff4c31a7bcae1dbc675789ea7df4e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que copia o n-ésimo elemento para o topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="555" column="6" bodyfile="operations.c" bodystart="555" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="operations_8c_1a6fa63cab9d7d96acf78f8dff5d4f782f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void duplica</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>duplica</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que duplica o último elemento da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.c" line="573" column="6" bodyfile="operations.c" bodystart="573" bodyend="577"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Ficheiro que contém funções que dizem respeito às operações (lógicas, matemáticas, conversões e manipulação da stack) </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="10"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="parser_8h" kindref="compound">parser.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stack_8h" kindref="compound">stack.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor">#define<sp/>MAKE_DADOS(var,<sp/>TYPE,<sp/>valor)<sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>var.dados.TYPE<sp/>=<sp/>valor;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>var.type<sp/>=<sp/>TYPE;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(<ref refid="structdata" kindref="compound">DATA</ref><sp/>x)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.<ref refid="structdata_1ae5547d02a1e1490a68bbd43c3fceb447" kindref="member">type</ref><sp/>==<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.<ref refid="structdata_1ae5547d02a1e1490a68bbd43c3fceb447" kindref="member">type</ref><sp/>==<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.<ref refid="structdata_1ae5547d02a1e1490a68bbd43c3fceb447" kindref="member">type</ref><sp/>==<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a4618cf21306b3c647741afa7ebefcab8" kindref="member">CHAR</ref>)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.<ref refid="structdata_1ae5547d02a1e1490a68bbd43c3fceb447" kindref="member">type</ref><sp/>==<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aee847e634a4297b274316de8a8ca9921" kindref="member">STRING</ref>)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1ab036ce08365356af3d41ddf51b84d4b6" kindref="member">soma</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>y<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>1))</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref><sp/>+<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>2))</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref><sp/>+<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>1))</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref><sp/>+<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>2))</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref><sp/>+<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1a0be10fa2e7b410007fa5f636331ab467" kindref="member">sub</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>y<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>1))</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref><sp/>-<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>2))</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref><sp/>-<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>1))</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref><sp/>-<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>2))</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref><sp/>-<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1a677f43a17e3ec86964dcedfdcf7ff731" kindref="member">mult</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>y<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>1))</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref><sp/>*<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>2))</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref><sp/>*<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>1))</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref><sp/>*<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>2))</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref><sp/>*<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1a6006fae1a4b27343bd0a1c0bbe3ae7df" kindref="member">quoc</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>y<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>1))</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>(y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>)<sp/>/<sp/>(x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>2))</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref><sp/>/<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>1))</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref><sp/>/<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>2))</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref><sp/>/<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref>;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1a6662ed5c52f3db81ac4f956d386f8978" kindref="member">dec</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1a26ec264014a6fcbcdbc5e69936e59724" kindref="member">CHAR</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a4618cf21306b3c647741afa7ebefcab8" kindref="member">CHAR</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1a35553b28f5794cfdb4be0b0e3e3f5435" kindref="member">inc</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1a26ec264014a6fcbcdbc5e69936e59724" kindref="member">CHAR</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a4618cf21306b3c647741afa7ebefcab8" kindref="member">CHAR</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1a6c479ffe2d68a52a12195e3d77b65098" kindref="member">resto</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>y<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref><sp/>%<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1adc7913acd9d3f73a2a21031fca415b72" kindref="member">expo</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>y<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>1))</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>pow(y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>,<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>2))</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>pow(y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref>,<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>1))</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>pow(y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>,<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref>);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(y)<sp/>==<sp/>2))</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>pow(y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref>,<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref>);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1a8cbbd532cb1f78509a9530ad463aa4b3" kindref="member">E</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>y<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref><sp/>&amp;<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1a3429e63d3d7972ee8ebddf4423934dcd" kindref="member">ou</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="349"><highlight class="normal">{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>y<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref><sp/>|<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1a5bfa48c870cc33d3d96ec12376d5210a" kindref="member">xor</ref><sp/>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>y<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>y.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref><sp/>^<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1a86f1cdf0f667f0fd0ab97668984592fb" kindref="member">not</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*<sp/>s)</highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>~(x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1addd91ecb562fd740a614a07e06b9a7c2" kindref="member">convertInt</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref>;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1a26ec264014a6fcbcdbc5e69936e59724" kindref="member">CHAR</ref>;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*eptr;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>strtol(x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1a3beeb46678aaab2565d0a2669c03ea1f" kindref="member">STRING</ref>,<sp/>&amp;eptr,<sp/>10);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>,<sp/>result);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1a24feda1ccdd45af669d76b27f8a8ce55" kindref="member">convertDouble</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref>;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1a26ec264014a6fcbcdbc5e69936e59724" kindref="member">CHAR</ref>;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(descobreTipo(x)<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>var<sp/>=<sp/>x.dados.STRING;</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAKE_DADOS(x,DOUBLE,var)</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1a7786f26285bd01e3ed020358c4759c12" kindref="member">convertChar</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a4618cf21306b3c647741afa7ebefcab8" kindref="member">CHAR</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref>;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a4618cf21306b3c647741afa7ebefcab8" kindref="member">CHAR</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operations_8c_1aff4e33f8697762e76f82a1431a965111" kindref="member">descobreTipo</ref>(x)<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1a26ec264014a6fcbcdbc5e69936e59724" kindref="member">CHAR</ref>;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8c_1a8327930bdcefb40d09e1ae07aaa61f49" kindref="member">MAKE_DADOS</ref>(x,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a4618cf21306b3c647741afa7ebefcab8" kindref="member">CHAR</ref>,<sp/>var);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(descobreTipo(x)<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>var<sp/>=<sp/>x.dados.STRING;</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAKE_DADOS(x,CHAR,var)</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="504"><highlight class="comment">void<sp/>convertString<sp/>(STACK<sp/>*s){</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="506"><highlight class="comment">}</highlight></codeline>
<codeline lineno="507"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1a5baa2ca1427f81508387c34b481f2998" kindref="member">swap</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="521"><highlight class="normal">{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>y<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>y);</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1a0df52259d8bd9d410d895561de62b661" kindref="member">rotate</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>y<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>z<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>y);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>z);</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1a5ff4c31a7bcae1dbc675789ea7df4e4a" kindref="member">copy</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="556"><highlight class="normal">{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>x.<ref refid="structdata_1a163b9b1f448decfa68ff8b95620ed223" kindref="member">dados</ref>.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>y<sp/>=<sp/><ref refid="stack_8c_1a1d071ebb0cb4da36627da80425078ce9" kindref="member">obterElemento</ref>(s,<sp/>var);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>y);</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8c_1a6fa63cab9d7d96acf78f8dff5d4f782f" kindref="member">duplica</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)</highlight></codeline>
<codeline lineno="574"><highlight class="normal">{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>y<sp/>=<sp/><ref refid="stack_8c_1a1c8a0d720a37d9d2a5844e6013c915c2" kindref="member">top</ref>(s);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>y);</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="operations.c"/>
  </compounddef>
</doxygen>
