<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="operations_8h" kind="file" language="C++">
    <compoundname>operations.h</compoundname>
    <includes refid="stack_8h" local="yes">stack.h</includes>
    <includes refid="parser_8h" local="yes">parser.h</includes>
    <includedby refid="parser_8c" local="yes">parser.c</includedby>
    <incdepgraph>
      <node id="3">
        <label>assert.h</label>
      </node>
      <node id="4">
        <label>parser.h</label>
        <link refid="parser_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>operations.h</label>
        <link refid="operations_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>parser.c</label>
        <link refid="parser_8c"/>
      </node>
      <node id="1">
        <label>operations.h</label>
        <link refid="operations_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="operations_8h_1ab036ce08365356af3d41ddf51b84d4b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soma</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>soma</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função que vai fazer a soma de dois valores. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="12" column="6" bodyfile="operations.c" bodystart="73" bodyend="98" declfile="operations.h" declline="12" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="operations_8h_1a0be10fa2e7b410007fa5f636331ab467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sub</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>sub</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função que vai fazer a subtração de dois valores. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="13" column="6" bodyfile="operations.c" bodystart="108" bodyend="133" declfile="operations.h" declline="13" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="operations_8h_1a677f43a17e3ec86964dcedfdcf7ff731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mult</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função que multiplica dois valores. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="14" column="6" bodyfile="operations.c" bodystart="144" bodyend="169" declfile="operations.h" declline="14" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="operations_8h_1a6006fae1a4b27343bd0a1c0bbe3ae7df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void quoc</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>quoc</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função que divide dois valores um pelo outro. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="15" column="6" bodyfile="operations.c" bodystart="180" bodyend="205" declfile="operations.h" declline="15" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="operations_8h_1a8cbbd532cb1f78509a9530ad463aa4b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void E</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>E</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que realiza operações do &apos;e&apos; lógico (bitwise) para inteiros. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="16" column="6" bodyfile="operations.c" bodystart="330" bodyend="337" declfile="operations.h" declline="16" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="operations_8h_1a86f1cdf0f667f0fd0ab97668984592fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void not</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>not</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que realiza operações not (bitwise) para inteiros. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="17" column="6" bodyfile="operations.c" bodystart="384" bodyend="390" declfile="operations.h" declline="17" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="operations_8h_1a5bfa48c870cc33d3d96ec12376d5210a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xor</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>xor</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que realiza operações xor (bitwise) para inteiros. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="18" column="6" bodyfile="operations.c" bodystart="366" bodyend="372" declfile="operations.h" declline="18" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="operations_8h_1a3429e63d3d7972ee8ebddf4423934dcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ou</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>ou</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que realiza operações do &apos;ou&apos; lógico (bitwise) para inteiros. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="19" column="6" bodyfile="operations.c" bodystart="348" bodyend="355" declfile="operations.h" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="operations_8h_1a6662ed5c52f3db81ac4f956d386f8978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dec</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>dec</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função é responsável por decrementar 1 valor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="20" column="6" bodyfile="operations.c" bodystart="216" bodyend="235" declfile="operations.h" declline="20" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="operations_8h_1a35553b28f5794cfdb4be0b0e3e3f5435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inc</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>inc</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função responsável por incrementar 1 valor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="21" column="6" bodyfile="operations.c" bodystart="246" bodyend="265" declfile="operations.h" declline="21" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="operations_8h_1a6c479ffe2d68a52a12195e3d77b65098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resto</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>resto</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função que vai apresentar o resto da divisão. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="22" column="6" bodyfile="operations.c" bodystart="276" bodyend="283" declfile="operations.h" declline="22" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="operations_8h_1adc7913acd9d3f73a2a21031fca415b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void expo</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>expo</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta é a função responsável pela exponencialização de valores. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="23" column="6" bodyfile="operations.c" bodystart="294" bodyend="319" declfile="operations.h" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="operations_8h_1addd91ecb562fd740a614a07e06b9a7c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void convertInt</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>convertInt</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que converte o valor do topo da stack para inteiro. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="24" column="6" bodyfile="operations.c" bodystart="401" bodyend="428" declfile="operations.h" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="operations_8h_1a7786f26285bd01e3ed020358c4759c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void convertChar</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>convertChar</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que converte o valor do topo da stack para caractere. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="25" column="6" bodyfile="operations.c" bodystart="475" bodyend="500" declfile="operations.h" declline="25" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="operations_8h_1a24feda1ccdd45af669d76b27f8a8ce55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void convertDouble</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>convertDouble</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que converte o valor do topo da stack para double. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="26" column="6" bodyfile="operations.c" bodystart="439" bodyend="464" declfile="operations.h" declline="26" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="operations_8h_1a5baa2ca1427f81508387c34b481f2998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que troca os últimos 2 elementos da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="28" column="6" bodyfile="operations.c" bodystart="520" bodyend="526" declfile="operations.h" declline="28" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="operations_8h_1a0df52259d8bd9d410d895561de62b661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rotate</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>rotate</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que roda os últimos 3 elementos da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="29" column="6" bodyfile="operations.c" bodystart="536" bodyend="544" declfile="operations.h" declline="29" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="operations_8h_1a5ff4c31a7bcae1dbc675789ea7df4e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que copia o n-ésimo elemento para o topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="30" column="6" bodyfile="operations.c" bodystart="555" bodyend="561" declfile="operations.h" declline="30" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="operations_8h_1a6fa63cab9d7d96acf78f8dff5d4f782f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void duplica</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>duplica</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que duplica o último elemento da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack onde vão ser armazenados os valores. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operations.h" line="31" column="6" bodyfile="operations.c" bodystart="573" bodyend="577" declfile="operations.h" declline="31" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Ficheiro que contém as declarações das funções do ficheiro <ref refid="operations_8c" kindref="compound">operations.c</ref> </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="9"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stack_8h" kindref="compound">stack.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="parser_8h" kindref="compound">parser.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1ab036ce08365356af3d41ddf51b84d4b6" kindref="member">soma</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1a0be10fa2e7b410007fa5f636331ab467" kindref="member">sub</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1a677f43a17e3ec86964dcedfdcf7ff731" kindref="member">mult</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1a6006fae1a4b27343bd0a1c0bbe3ae7df" kindref="member">quoc</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1a8cbbd532cb1f78509a9530ad463aa4b3" kindref="member">E</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1a86f1cdf0f667f0fd0ab97668984592fb" kindref="member">not</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*<sp/>s);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1a5bfa48c870cc33d3d96ec12376d5210a" kindref="member">xor</ref><sp/>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*<sp/>s);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1a3429e63d3d7972ee8ebddf4423934dcd" kindref="member">ou</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1a6662ed5c52f3db81ac4f956d386f8978" kindref="member">dec</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1a35553b28f5794cfdb4be0b0e3e3f5435" kindref="member">inc</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1a6c479ffe2d68a52a12195e3d77b65098" kindref="member">resto</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1adc7913acd9d3f73a2a21031fca415b72" kindref="member">expo</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1addd91ecb562fd740a614a07e06b9a7c2" kindref="member">convertInt</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1a7786f26285bd01e3ed020358c4759c12" kindref="member">convertChar</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1a24feda1ccdd45af669d76b27f8a8ce55" kindref="member">convertDouble</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//void<sp/>convertString<sp/>(STACK<sp/>*s);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1a5baa2ca1427f81508387c34b481f2998" kindref="member">swap</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1a0df52259d8bd9d410d895561de62b661" kindref="member">rotate</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1a5ff4c31a7bcae1dbc675789ea7df4e4a" kindref="member">copy</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operations_8h_1a6fa63cab9d7d96acf78f8dff5d4f782f" kindref="member">duplica</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
    </programlisting>
    <location file="operations.h"/>
  </compounddef>
</doxygen>
